Build an MVP fullstack Complaint Management System.

Stack & constraints (required)
- Frontend: Vite + React (JavaScript) + Tailwind CSS. Use React Router.
- Backend: Node.js + Express (JavaScript) + Sequelize ORM.
- Database: PostgreSQL OK; MySQL preferred. Pick one and document it.
- Auth: registration number → OTP (OTP printed to server console for testing) → set password → login (JWT or session is fine).
- Keep everything JavaScript (no TypeScript).

MVP features (implement these only; stop after MVP and ask me before adding extras)
1. Landing page: simple hero. On the right side of the page show panels to Register or Log in (clear layout).
2. Registration flow: student enters registration number + email → backend validates reg number against a seeded `students` table → sends OTP to console → verify OTP → user sets password → login.
3. Roles: `student`, `school_admin`, `central_admin`.
4. Student dashboard: create complaint (title, description, category: academics|general|hostel, anonymous toggle). If anonymous selected show a confirmation modal with the warning: “Admins can trace anonymous reports. False reports may lead to flags.” User must confirm before submit. Students can view their complaints and statuses.
5. School admin dashboard: sees complaints for their category; can mark complaint `resolved` (add resolution note) or `false` (add reason). Marking `false` increments user `flag_count`.
6. Central admin dashboard: sees all complaints, can flag/unflag users, view user details.
7. Anonymous trace: Even if complaint is anonymous to users, admin endpoints can retrieve reporter identity. Accessing trace creates an `audit_log` entry (who traced, when, complaint id).
8. Flagging & suspension: default threshold = 3. When flag_count >= threshold, suspend account (show suspended status in admin UI). Notify via console for MVP.
9. Seed data: at least 2 students (e.g., STU1001, STU1002) and one of each admin role. Provide a simple DB reset/seed script.
10. OTP mode: `.env` option like `OTP_MODE=console|email` — default console.

Deliverables
- Single repo with `frontend/` and `backend/`.
- README with dev steps: install, env example, migrate/seed, run frontend and backend, and test flow: register -> OTP (console) -> verify -> login -> create complaint -> admin trace.
- Minimal REST endpoints documented in README (you may choose exact URLs).
- Make sure all core flows are functional before stopping.

UX & quality
- Minimal, functional UI (no fancy styling). Use badges for status and simple forms.
- Frontend must show the anonymous-warning modal and require confirmation.
- Console/logs must show OTPs and suspension notifications for testing.

Notes to implementer (give freedom)
- You may pick minor endpoint names and table/field names — just document them.
- Use Sequelize migrations or sync for the DB schema.
- Stop after MVP. Ask the user before adding non-MVP features (websockets, analytics, Docker, real email provider).
